# Used for showing two config templates running at the same time.
# Sample Logstash configuration for creating a simple File -> Logstash -> Elasticsearch pipeline.

# Setup file input
input {
    file {
        path => "/tmp/logstash_test_data.log"
        start_position => "beginning"
        type => "filesquid"
    }
}

# Setup filter to match messages that you want forwarded to our backend python service
# Required environment variables or the values can be hard-coded:
# SERVICE_URL: the url to our backend python service (example: http://localhost:8000/logstash_extract)
filter {
    if [type] == "filesquid" {
        grok {
            match => { "message" => "%{NUMBER:syslog_timestamp}%{SPACE}%{NUMBER:pid} %{IP:host} %{DATA:status} %{NUMBER:bytes} %{DATA:http_method} %{URI:http_address} - %{DATA:no_idea} %{GREEDYDATA:mime_type}" }
        }
        http {
            url => "${SERVICE_URL}"
            body => {
                "url" => "%{http_address}"
                "index" => "filesquid"
            }
            verb => "POST"
            body_format => "json"
            target_body => "domaintools"
            add_tag => ["from_api"]
        }
    }
}

# Required environment variables or the values can be hard-coded:
# ELASTIC_HOST: the url to your elasticsearch host (example: http://localhost:9200)
# ELASTIC_USERNAME: the username to access your elasticsearch instance (example: elastic)
# ELASTIC_PASSWORD: the password for the username provided to access your elasticsearch instance
output {
    if [type] == "filesquid" {
        elasticsearch {
            hosts => ["${ELASTIC_HOST}"]
            user => "${ELASTIC_USERNAME}"
            password => "${ELASTIC_PASSWORD}"
            index => "file-events"
        }
    }
}
